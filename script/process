#!/bin/bash

error_handler() {
  local line_no=$1
  local error_code=$2
  echo "Error on line ${line_no} with exit code ${error_code}"
  case ${error_code} in
    1)
      echo "General error occurred"
      ;;
    2)
      echo "Missing repository directory"
      ;;
    *)
      echo "Unexpected error occurred"
      ;;
  esac
}

# Enable error tracing and error handler
set -e
trap 'error_handler ${LINENO} $?' ERR

# Get the project root directory
PROJECT_ROOT="$(cd "$(dirname "$0")/.." && pwd)"
REPO_DIR="${1:-$PROJECT_ROOT/repos}"

{
  # Only pass LIMIT if it was actually specified
  if [ -n "$2" ]; then
    LIMIT_ARG="$2"
    echo "Using limit: $LIMIT_ARG"
  else
    LIMIT_ARG=""
  fi

  # Change to project root
  cd "$PROJECT_ROOT"

  mkdir -p "$REPO_DIR"

  echo "Step 1: Downloading repositories..."
  if [ -n "$LIMIT_ARG" ]; then
    lib/download.rb "$REPO_DIR" "$LIMIT_ARG"
    lib/validate/download.rb "$REPO_DIR" "$LIMIT_ARG"
  else
    lib/download.rb "$REPO_DIR"
    lib/validate/download.rb "$REPO_DIR"
  fi

  echo -e "\nStep 2: Cleaning repositories..."
  lib/cleanup.rb "$REPO_DIR"
  lib/validate/cleanup.rb "$REPO_DIR"

  echo -e "\nStep 3: Analyzing code..."
  lib/analyze.rb "$REPO_DIR"
  lib/validate/analyze.rb "$REPO_DIR"

  echo -e "\nProcess complete! Check the output above for the extraMatchWords hash."
  ;
} 2> >(tee log/process.err >&2) | tee log/process.log
