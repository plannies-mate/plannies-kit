#!/usr/bin/env ruby

require 'fileutils'
require 'json'

class ScraperAnalysisOutputGenerator
  def initialize(results, total_repos)
    @results = results
    @total_repos = total_repos
  end

  def generate_output_files
    FileUtils.mkdir_p('log')

    output_scraper_lists
    generate_js_file
    generate_debug_file
    print_analysis_results
    validate_classification
  end

  def output_scraper_lists
    output_list(
      @results[:repos].select { |_, r| r[:status] == 'placeholder' }.keys, 
      ProcessBase::PLACEHOLDER_SCRAPERS_FILE, 
      'placeholder'
    )
    output_list(
      @results[:repos].select { |_, r| r[:status] == 'trivial' }.keys, 
      ProcessBase::TRIVIAL_SCRAPERS_FILE, 
      'trivial'
    )
    output_list(
      @results[:repos].select { |_, r| r[:status] == 'no_scraper' }.keys, 
      ProcessBase::NO_SCRAPER_FILE, 
      'no scraper'
    )
  end

  def generate_js_file
    js_content = generate_js_content
    File.write(ProcessBase::SCRAPER_ANALYSIS_FILE, js_content)
  end

  def generate_debug_file
    File.write(ProcessBase::ANALYSIS_RESULTS_FILE, JSON.pretty_generate(@results))
  end

  def print_analysis_results
    puts "\n# Analysis Results"
    puts "Generated #{ProcessBase::SCRAPER_ANALYSIS_FILE} with active scraper data"
    puts "Generated #{ProcessBase::ANALYSIS_RESULTS_FILE} with full analysis"
    puts "Total repositories: #{@total_repos}"
    puts "Including #{@results[:valid_repos].size} active scrapers"
    puts "Excluded #{@results[:metadata][:trivial_scrapers_skipped]} trivial scrapers (see #{ProcessBase::TRIVIAL_SCRAPERS_FILE})"
    puts "Excluded #{@results[:metadata][:placeholder_scrapers_found]} placeholder scrapers (see #{ProcessBase::PLACEHOLDER_SCRAPERS_FILE})"
    puts "Excluded #{@results[:metadata][:no_scraper_file]} repos without scraper files (#{ProcessBase::NO_SCRAPER_FILE})"
    puts "Generated at: #{@results[:metadata][:generated_at]}"
  end

  def validate_classification(total_repos = @total_repos)
    total_classified = @results[:valid_repos].size +
      @results[:metadata][:trivial_scrapers_skipped] +
      @results[:metadata][:placeholder_scrapers_found] +
      @results[:metadata][:no_scraper_file]

    return unless total_classified != total_repos

    puts "\nWARNING: Classification mismatch!"
    puts "Total repos: #{total_repos}"
    puts "Total classified: #{total_classified}"
    puts "Difference: #{total_repos - total_classified}"
  end

  private

  def output_list(list, filename, type)
    return unless list.any?
    File.write(filename, list.sort.join("\n"))
    puts "Excluded #{list.size} #{type} scrapers (see #{filename})"
  end

  def generate_js_content
    <<~JS
      // Generated by Plannies Mate at #{@results[:metadata][:generated_at]}
      // for #{@results[:valid_repos].size} active scrapers

      export const scraperDateTime = '#{@results[:metadata][:generated_at]}';

      export const scraperData = {
      #{@results[:valid_repos].map { |name, data|
        "  '#{name}': {\n" \
          "    description: #{data[:description].to_json},\n" \
          "    words: #{data[:words].inspect}\n" \
          "  }"
      }.join(",\n")}
      };

      export const ignoreWords = [];
    JS
  end
end
